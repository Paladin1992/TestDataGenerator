@using TestDataGenerator.Common
@using TestDataGenerator.Data.Enums
@using TestDataGenerator.Services.Models
@using TestDataGenerator.Web.Models
@model SetupCreateViewModel
@{
    List<FieldTypeInfo> fieldTypeInfos = ViewBag.FieldTypeInfos;
}

<div data-bind="visible: true" class="tdg-field-container clearfix" style="display: none;">

    <div class="tdg-field name">
        <span>Név:</span>
        <input type="text" maxlength="50" data-bind="value: name">

        <span>Típus:</span>
        <select data-bind="
                attr: { id: 'select-' + ($parent.fields.length + 1) },
                value: field.fieldType,
                event: {'change': field.fieldTypeChanged }">
            @foreach (var item in fieldTypeInfos)
            {
                <option value="@item.Value" @(item.Value == 0 ? " selected disabled" : null)>@item.Description</option>
            }
        </select>

        <button data-bind="click: function() { $parent.removeField(field); }" class="tdg-field remove-button">&times;</button>
    </div>

    <div data-bind="template: { name: templateToUse }" class="tdg-field specific"></div>
</div>


<script type="text/html" id="none-template">
</script>

<script type="text/html" id="lastName-template">
    <!-- nothing to put here -->
</script>

<script type="text/html" id="firstName-template">
    @{
        List<KeyValuePair<string, int>> enumAsList = ExtensionMethods.EnumWithDescriptionToList<Gender>();
        var genderListItems = new List<SelectListItem>();

        for (int i = 0; i < enumAsList.Count; i++)
        {
            genderListItems.Add(new SelectListItem()
            {
                Text = enumAsList[i].Key,
                Value = enumAsList[i].Value.ToString(),
                Selected = (i == 0),
                Disabled = (i == 0)
            });
        }
    }

    Nem:
    @Html.DropDownList("firstNameGender", genderListItems, null, new
    {
        @class = "",
        data_bind = "value: field.firstNameFieldModel().gender"
    })
</script>

<script type="text/html" id="dateTime-template">

    <!-- minDate -->
    <div>
        Legkisebb dátum/idő:
        <input type="text" data-bind="
               attr: { id: 'minDateYear-' + field.id() },
               value: field.dateTimeFieldModel().minDate().year">

        <select data-bind="
                attr: { id: 'minDateMonth-' + field.id() },
                options: fillArray(1, 12),
                value: field.dateTimeFieldModel().minDate().month"></select>

        <select data-bind="
                attr: { id: 'minDateDay-' + field.id() },
                options: field.dateTimeFieldModel().minDate().dayList(),
                value: field.dateTimeFieldModel().minDate().day"></select>

        <select data-bind="
                attr: { id: 'minDateHours-' + field.id() },
                options: fillArray(0, 23),
                value: field.dateTimeFieldModel().minDate().hours"></select>

        <select data-bind="
                attr: { id: 'minDateMinutes-' + field.id() },
                options: fillArray(0, 59),
                value: field.dateTimeFieldModel().minDate().minutes"></select>

        <select data-bind="
                attr: { id: 'minDateSeconds-' + field.id() },
                options: fillArray(0, 59),
                value: field.dateTimeFieldModel().minDate().seconds"></select>
    </div>
    
    <!-- maxDate -->
    <div>
        Legnagyobb dátum/idő:
        <input type="text" data-bind="
               attr: { id: 'maxDateYear-' + field.id() },
               value: field.dateTimeFieldModel().maxDate().year">

        <select data-bind="
                attr: { id: 'maxDateMonth-' + field.id() },
                options: fillArray(1, 12),
                value: field.dateTimeFieldModel().maxDate().month"></select>

        <select data-bind="
                attr: { id: 'maxDateDay-' + field.id() },
                options: field.dateTimeFieldModel().minDate().dayList(),
                value: field.dateTimeFieldModel().maxDate().day"></select>

        <select data-bind="
                attr: { id: 'maxDateHours-' + field.id() },
                options: fillArray(0, 23),
                value: field.dateTimeFieldModel().maxDate().hours"></select>

        <select data-bind="
                attr: { id: 'maxDateMinutes-' + field.id() },
                options: fillArray(0, 59),
                value: field.dateTimeFieldModel().maxDate().minutes"></select>

        <select data-bind="
                attr: { id: 'maxDateSeconds-' + field.id() },
                options: fillArray(0, 59),
                value: field.dateTimeFieldModel().maxDate().seconds"></select>
    </div>
    <!-- END of maxDate -->

</script>

<script type="text/html" id="email-template">
    <!-- nothing to put here -->
</script>

@* TODO *@
<script type="text/html" id="text-template">
    text
</script>

<script type="text/html" id="byte-template">
    <input type="number"
           data-bind="
           attr: {
                id: 'byteMinValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.byte, field.byteFieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.byte, field.byteFieldModel().isSigned())
           },
           value: field.byteFieldModel().minValue">

    <input type="number"
           data-bind="
           attr: {
                id: 'byteMaxValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.byte, field.byteFieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.byte, field.byteFieldModel().isSigned())
           },
           value: field.byteFieldModel().maxValue">

    <input type="checkbox"
           data-bind="
           checked: field.byteFieldModel().isSigned,
           event: {
                'change': function(data, event) {
                    clampNumericValueToRange('byte', field.id());
                }
           }">
    Előjeles
</script>

<script type="text/html" id="int16-template">
    <input type="number"
           data-bind="
           attr: {
                id: 'int16MinValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int16, field.int16FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int16, field.int16FieldModel().isSigned())
           },
           value: field.int16FieldModel().minValue">

    <input type="number"
           data-bind="
           attr: {
                id: 'int16MaxValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int16, field.int16FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int16, field.int16FieldModel().isSigned())
           },
           value: field.int16FieldModel().maxValue">

    <input type="checkbox"
           data-bind="
           checked: field.int16FieldModel().isSigned,
           event: {
                'change': function(data, event) {
                    clampNumericValueToRange('int16', field.id());
                }
           }">
    Előjeles
</script>

<script type="text/html" id="int32-template">
    <input type="number"
           data-bind="
           attr: {
                id: 'int32MinValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int32, field.int32FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int32, field.int32FieldModel().isSigned())
           },
           value: field.int32FieldModel().minValue">

    <input type="number"
           data-bind="
           attr: {
                id: 'int32MaxValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int32, field.int32FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int32, field.int32FieldModel().isSigned())
           },
           value: field.int32FieldModel().maxValue">

    <input type="checkbox"
           data-bind="
           checked: field.int32FieldModel().isSigned,
           event: {
                'change': function(data, event) {
                    clampNumericValueToRange('int32', field.id());
                }
           }">
    Előjeles
</script>

<script type="text/html" id="int64-template">
    <input type="number"
           data-bind="
           attr: {
                id: 'int64MinValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int64, field.int64FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int64, field.int64FieldModel().isSigned())
           },
           value: field.int64FieldModel().minValue">

    <input type="number"
           data-bind="
           attr: {
                id: 'int64MaxValue-' + field.id(),
                min: getMinValue(getConstants().fieldType.int64, field.int64FieldModel().isSigned()),
                max: getMaxValue(getConstants().fieldType.int64, field.int64FieldModel().isSigned())
           },
           value: field.int64FieldModel().maxValue">

    <input type="checkbox"
           data-bind="
           checked: field.int64FieldModel().isSigned,
           event: {
                'change': function(data, event) {
                    clampNumericValueToRange('int64', field.id());
                }
           }">
    Előjeles
</script>

@* TODO *@
<script type="text/html" id="single-template">
    float
</script>

@* TODO *@
<script type="text/html" id="double-template">
    double
</script>

@* TODO *@
<script type="text/html" id="decimal-template">
    decimal
</script>

<script type="text/html" id="hash-template">
    Hossz (1-32767):
    <input type="number" min="1" max="32767" data-bind="value: field.hashFieldModel().desiredLength">
</script>

<script type="text/html" id="guid-template">
    <input type="checkbox" data-bind="attr: { id: 'guid-' + field.id() }, checked: field.guidFieldModel().separateWithHyphens">
    Elválasztás kötőjelekkel
</script>

<script type="text/html" id="base64-template">
    Hossz (1-32767):
    <input type="number" min="1" max="32767" data-bind="value: field.base64FieldModel().desiredLength">
</script>

@* TODO *@
<script type="text/html" id="customSet-template">
    customSet
</script>